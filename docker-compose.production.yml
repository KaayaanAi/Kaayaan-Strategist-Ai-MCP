# Production Docker Compose Configuration
# Secure, production-ready deployment with enhanced security
# Usage: docker-compose -f docker-compose.production.yml up -d

services:
  # ==================== Kaayaan Strategist MCP Server ====================
  kaayaan-strategist:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kaayaan-strategist-mcp-prod
    restart: always
    
    # Security: Run as non-root user
    user: "1001:1001"
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    
    # Temporary volumes for writable directories
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/log:noexec,nosuid,size=200m
    
    # Environment configuration
    env_file:
      - .env.production.secure
    
    environment:
      NODE_ENV: production
      HTTP_MODE: "true"
      PORT: "3000"
      WEBSOCKET_PORT: "3001"
      HOST: "0.0.0.0"
      
      # Database connections (internal network only)
      MONGODB_URI: "mongodb://kaayaan_admin:${MONGO_ROOT_PASSWORD}@mongo:27017/kaayaan_strategist?authSource=admin"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      
      # Security settings
      ENABLE_AUTH: "true"
      API_KEY: "${API_KEY}"
      ALLOWED_ORIGINS: "${ALLOWED_ORIGINS}"
      
      # Performance settings
      NODE_OPTIONS: "--max-old-space-size=2048"
      UV_THREADPOOL_SIZE: "8"
    
    # Port exposure (only necessary ports)
    expose:
      - "3000"
      - "3001"
    
    # External port mapping (use reverse proxy in production)
    ports:
      - "${EXTERNAL_HTTP_PORT:-3000}:3000"
      - "${EXTERNAL_WS_PORT:-3001}:3001"
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { res.statusCode === 200 ? process.exit(0) : process.exit(1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Dependencies
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=kaayaan-strategist,environment=production"
    
    # Networks
    networks:
      - kaayaan-internal
      - kaayaan-external
    
    # Labels for monitoring and management
    labels:
      - "com.kaayaan.service=mcp-server"
      - "com.kaayaan.environment=production"
      - "com.kaayaan.version=2.1.0"
      - "traefik.enable=true"
      - "traefik.docker.network=kaayaan-external"
      - "traefik.http.routers.kaayaan-api.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.kaayaan-api.tls=true"
      - "traefik.http.routers.kaayaan-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.kaayaan-api.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.kaayaan-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.kaayaan-api.middlewares=kaayaan-auth"

  # ==================== MongoDB Database (Production) ====================
  mongo:
    image: mongo:6.0-jammy
    container_name: kaayaan-mongo-prod
    restart: always
    
    # Security: Run as non-root user
    user: "999:999"
    
    # Security: Read-only root filesystem with exceptions
    read_only: true
    
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    
    # Security: Drop capabilities
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    
    # Environment variables
    environment:
      MONGO_INITDB_ROOT_USERNAME: kaayaan_admin
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_ROOT_PASSWORD}"
      MONGO_INITDB_DATABASE: kaayaan_strategist
    
    # MongoDB configuration with security
    command: >
      mongod 
      --auth 
      --bind_ip_all 
      --journal
      --storageEngine wiredTiger
      --wiredTigerCacheSizeGB 1
      --slowms 100
      --profile 1
      --tlsMode disabled
      --setParameter authenticationMechanisms=SCRAM-SHA-1,SCRAM-SHA-256
      --setParameter failIndexKeyTooLong=false
      --logpath /dev/stdout
      --logappend
      --quiet
    
    # Internal network only (no external ports)
    expose:
      - "27017"
    
    # Volumes with proper security
    volumes:
      - mongo_data:/data/db:rw,Z
      - mongo_config:/data/configdb:rw,Z
      - ./scripts/mongo-init:/docker-entrypoint-initdb.d:ro
    
    # Temporary volumes
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Health check
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok == 1 ? 0 : 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=mongodb,environment=production"
    
    # Internal network only
    networks:
      - kaayaan-internal
    
    # Labels
    labels:
      - "com.kaayaan.service=mongodb"
      - "com.kaayaan.environment=production"

  # ==================== Redis Cache (Production) ====================
  redis:
    image: redis:7-alpine
    container_name: kaayaan-redis-prod
    restart: always
    
    # Security: Run as non-root user
    user: "999:999"
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    
    # Redis configuration with security
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
      --databases 1
      --logfile ""
      --loglevel notice
      --protected-mode yes
      --port 6379
      --bind 0.0.0.0
    
    # Internal network only
    expose:
      - "6379"
    
    # Volumes with proper security
    volumes:
      - redis_data:/data:rw,Z
    
    # Temporary volumes
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=redis,environment=production"
    
    # Internal network only
    networks:
      - kaayaan-internal
    
    # Labels
    labels:
      - "com.kaayaan.service=redis"
      - "com.kaayaan.environment=production"

  # ==================== Reverse Proxy (Traefik) ====================
  traefik:
    image: traefik:v2.10
    container_name: kaayaan-traefik-prod
    restart: always
    
    # Security: Run as non-root user
    user: "65534:65534"  # nobody user
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    
    # Command configuration
    command:
      - "--api.dashboard=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=kaayaan-external"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.keytype=EC256"
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--global.sendanonymoususage=false"
    
    # Ports
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Prometheus metrics
    
    # Volumes
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_letsencrypt:/letsencrypt:rw,Z"
    
    # Temporary volumes
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Networks
    networks:
      - kaayaan-external
    
    # Labels
    labels:
      - "com.kaayaan.service=reverse-proxy"
      - "com.kaayaan.environment=production"

  # ==================== Security Scanner (Optional) ====================
  security-scanner:
    image: aquasec/trivy:latest
    container_name: kaayaan-security-scanner
    restart: "no"
    
    # Security
    user: "65534:65534"
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    
    # Scan command
    command: >
      sh -c "
      trivy image --exit-code 1 --severity HIGH,CRITICAL kaayaan-strategist-mcp-prod &&
      trivy image --exit-code 1 --severity HIGH,CRITICAL mongo:6.0-jammy &&
      trivy image --exit-code 1 --severity HIGH,CRITICAL redis:7-alpine
      "
    
    # Volumes
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    
    # Temporary volumes
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Profile for security scanning
    profiles:
      - security-scan
    
    # Labels
    labels:
      - "com.kaayaan.service=security-scanner"
      - "com.kaayaan.environment=production"

# ==================== Networks ====================
networks:
  kaayaan-internal:
    name: kaayaan-internal
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  kaayaan-external:
    name: kaayaan-external
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ==================== Volumes ====================
volumes:
  mongo_data:
    name: kaayaan_mongo_data_prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/kaayaan/mongodb
  
  mongo_config:
    name: kaayaan_mongo_config_prod
    driver: local
  
  redis_data:
    name: kaayaan_redis_data_prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/kaayaan/redis
  
  traefik_letsencrypt:
    name: kaayaan_traefik_letsencrypt
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/kaayaan/letsencrypt

# ==================== Secrets (Docker Swarm Mode) ====================
# Uncomment for Docker Swarm deployments
# secrets:
#   mongo_root_password:
#     external: true
#   redis_password:
#     external: true
#   api_key:
#     external: true
#   traefik_basic_auth:
#     external: true